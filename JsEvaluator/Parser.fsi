// Signature file for parser generated by fsyacc
module Parser
type token = 
  | NUMBER of ( double )
  | IDENTIFIER of ( string )
  | EOF
  | SEMICOLON
  | EQUAL
  | LPARAN
  | RPARAN
  | LBRACE
  | RBRACE
  | COMMA
  | MINUS
  | PLUS
  | LESSOREQUAL
  | VAR
  | FUNCTION
  | RET
  | IF
type tokenId = 
    | TOKEN_NUMBER
    | TOKEN_IDENTIFIER
    | TOKEN_EOF
    | TOKEN_SEMICOLON
    | TOKEN_EQUAL
    | TOKEN_LPARAN
    | TOKEN_RPARAN
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_COMMA
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_LESSOREQUAL
    | TOKEN_VAR
    | TOKEN_FUNCTION
    | TOKEN_RET
    | TOKEN_IF
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_statement
    | NONTERM_statementList
    | NONTERM_argumentList
    | NONTERM_parameterList
    | NONTERM_expression
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Program ) 
