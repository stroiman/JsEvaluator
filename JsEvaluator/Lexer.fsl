{
module Lexer
open Microsoft.FSharp.Text.Lexing
open Parser

let getString = LexBuffer<_>.LexemeString
let getDouble = getString >> System.Double.Parse
let keywords = [
    ("if", IF)
    ("var", VAR)
    ("return", RET)
    ("function", FUNCTION)] |> Map.ofList
}

let digit = ['0' - '9']
let number = digit+
let char = ['a'-'z' 'A'-'Z']
let identifier = char+
let whitespace = [' ' '\t' '\r' '\n']

rule token = parse
    | whitespace*   { token lexbuf }
    | '+'           { PLUS }
    | '-'           { MINUS }
    | ';'           { SEMICOLON }
    | '('           { LPARAN }
    | ')'           { RPARAN }
    | '{'           { LBRACE }
    | '}'           { RBRACE }
    | ','           { COMMA }
    | '='           { EQUAL }
    | "<="          { LESSOREQUAL }
    | identifier    { let str = lexbuf |> getString 
                      match keywords.TryFind str with
                      | Some x -> x
                      | None -> IDENTIFIER str }
    | number        { lexbuf |> getDouble |> NUMBER }
    | eof           { EOF }