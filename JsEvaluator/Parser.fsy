%{
open Ast
%}
%start start
%token VAR FUNCTION
%token MINUS PLUS
%token SEMICOLON EQUAL LPARAN RPARAN LBRACE RBRACE COMMA
%token EOF
%token < string > IDENTIFIER
%token < double > NUMBER
%type < Program > start
%%

start:
    | statementList 
      EOF           { Program ($1 |> List.rev) }

statement:
    | expression    { ExpressionStmt $1 }
    | VAR IDENTIFIER 
      EQUAL
      expression    { VariableDefinition ($2,$4) }

statementList:
    |               { [] }
    | statement     { [$1] }
    | statementList
      SEMICOLON
      statement     { $3 :: $1 }

argumentList:
    |               { [] }
    | IDENTIFIER    { [$1] }
    | argumentList
      COMMA
      IDENTIFIER    { $3 :: $1 }
      
expression:
    | IDENTIFIER    { VariableLookup $1 }
    | NUMBER        { NumberLiteral $1 }
    | expression
      PLUS
      expression    { Plus($1, $3) }
    | expression
      MINUS
      expression    { Minus($1, $3) }
    | FUNCTION
      LPARAN
      argumentList
      RPARAN
      LBRACE
      statementList
      RBRACE        { FunctionDefinition($3 |> List.rev , $6 |> List.rev) }
