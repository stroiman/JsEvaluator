// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Ast

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | NUMBER of ( double )
  | IDENTIFIER of ( string )
  | EOF
  | SEMICOLON
  | EQUAL
  | LPARAN
  | RPARAN
  | LBRACE
  | RBRACE
  | COMMA
  | MINUS
  | PLUS
  | VAR
  | FUNCTION
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_NUMBER
    | TOKEN_IDENTIFIER
    | TOKEN_EOF
    | TOKEN_SEMICOLON
    | TOKEN_EQUAL
    | TOKEN_LPARAN
    | TOKEN_RPARAN
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_COMMA
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_VAR
    | TOKEN_FUNCTION
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_statement
    | NONTERM_statementList
    | NONTERM_argumentList
    | NONTERM_expression

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | NUMBER _ -> 0 
  | IDENTIFIER _ -> 1 
  | EOF  -> 2 
  | SEMICOLON  -> 3 
  | EQUAL  -> 4 
  | LPARAN  -> 5 
  | RPARAN  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | COMMA  -> 9 
  | MINUS  -> 10 
  | PLUS  -> 11 
  | VAR  -> 12 
  | FUNCTION  -> 13 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_NUMBER 
  | 1 -> TOKEN_IDENTIFIER 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_SEMICOLON 
  | 4 -> TOKEN_EQUAL 
  | 5 -> TOKEN_LPARAN 
  | 6 -> TOKEN_RPARAN 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_MINUS 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_VAR 
  | 13 -> TOKEN_FUNCTION 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_statement 
    | 3 -> NONTERM_statement 
    | 4 -> NONTERM_statementList 
    | 5 -> NONTERM_statementList 
    | 6 -> NONTERM_statementList 
    | 7 -> NONTERM_argumentList 
    | 8 -> NONTERM_argumentList 
    | 9 -> NONTERM_argumentList 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_expression 
    | 14 -> NONTERM_expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | NUMBER _ -> "NUMBER" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | EOF  -> "EOF" 
  | SEMICOLON  -> "SEMICOLON" 
  | EQUAL  -> "EQUAL" 
  | LPARAN  -> "LPARAN" 
  | RPARAN  -> "RPARAN" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | COMMA  -> "COMMA" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | VAR  -> "VAR" 
  | FUNCTION  -> "FUNCTION" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LPARAN  -> (null : System.Object) 
  | RPARAN  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUNCTION  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 9us; 11us; 12us; 26us; 9us; 2us; 65535us; 0us; 2us; 26us; 10us; 1us; 65535us; 24us; 14us; 6us; 65535us; 0us; 4us; 7us; 8us; 11us; 4us; 21us; 19us; 22us; 20us; 26us; 4us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 10us; 12us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 6us; 1us; 1us; 3us; 2us; 12us; 13us; 1us; 3us; 1us; 3us; 1us; 3us; 3us; 3us; 12us; 13us; 1us; 5us; 2us; 6us; 14us; 1us; 6us; 1us; 6us; 1us; 8us; 2us; 9us; 14us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 3us; 12us; 12us; 13us; 3us; 12us; 13us; 13us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 13us; 15us; 17us; 19us; 23us; 25us; 28us; 30us; 32us; 34us; 37us; 39us; 41us; 43us; 45us; 49us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; |]
let _fsyacc_action_rows = 28
let _fsyacc_actionTableElements = [|4us; 16388us; 0us; 18us; 1us; 17us; 12us; 5us; 13us; 23us; 0us; 49152us; 2us; 32768us; 2us; 3us; 3us; 11us; 0us; 16385us; 2us; 16386us; 10us; 22us; 11us; 21us; 1us; 32768us; 1us; 6us; 1us; 32768us; 4us; 7us; 3us; 32768us; 0us; 18us; 1us; 17us; 13us; 23us; 2us; 16387us; 10us; 22us; 11us; 21us; 0us; 16389us; 2us; 32768us; 3us; 11us; 8us; 27us; 4us; 32768us; 0us; 18us; 1us; 17us; 12us; 5us; 13us; 23us; 0us; 16390us; 0us; 16392us; 2us; 32768us; 6us; 25us; 9us; 15us; 1us; 32768us; 1us; 16us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 2us; 16396us; 10us; 22us; 11us; 21us; 2us; 16397us; 10us; 22us; 11us; 21us; 3us; 32768us; 0us; 18us; 1us; 17us; 13us; 23us; 3us; 32768us; 0us; 18us; 1us; 17us; 13us; 23us; 1us; 32768us; 5us; 24us; 1us; 16391us; 1us; 13us; 1us; 32768us; 7us; 26us; 4us; 16388us; 0us; 18us; 1us; 17us; 12us; 5us; 13us; 23us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 13us; 15us; 17us; 21us; 24us; 25us; 28us; 33us; 34us; 35us; 38us; 40us; 41us; 42us; 43us; 46us; 49us; 53us; 57us; 59us; 61us; 63us; 68us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 4us; 0us; 1us; 3us; 0us; 1us; 3us; 1us; 1us; 3us; 3us; 7us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 16392us; 65535us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; |]
let _fsyacc_reductions ()  =    [| 
# 162 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Program )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 171 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "Parser.fsy"
                                           Program (_1 |> List.rev) 
                   )
# 16 "Parser.fsy"
                 :  Program ));
# 182 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                           ExpressionStmt _1 
                   )
# 19 "Parser.fsy"
                 : 'statement));
# 193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                           VariableDefinition (_2,_4) 
                   )
# 22 "Parser.fsy"
                 : 'statement));
# 205 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                           [] 
                   )
# 25 "Parser.fsy"
                 : 'statementList));
# 215 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                           [_1] 
                   )
# 26 "Parser.fsy"
                 : 'statementList));
# 226 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                           _3 :: _1 
                   )
# 29 "Parser.fsy"
                 : 'statementList));
# 238 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                           [] 
                   )
# 32 "Parser.fsy"
                 : 'argumentList));
# 248 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                           [_1] 
                   )
# 33 "Parser.fsy"
                 : 'argumentList));
# 259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                           _3 :: _1 
                   )
# 36 "Parser.fsy"
                 : 'argumentList));
# 271 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  string )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                           VariableLookup _1 
                   )
# 39 "Parser.fsy"
                 : 'expression));
# 282 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  double )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                           NumberLiteral _1 
                   )
# 40 "Parser.fsy"
                 : 'expression));
# 293 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                           Plus(_1, _3) 
                   )
# 43 "Parser.fsy"
                 : 'expression));
# 305 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                           Minus(_1, _3) 
                   )
# 46 "Parser.fsy"
                 : 'expression));
# 317 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argumentList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                           FunctionDefinition(_3 |> List.rev , _6 |> List.rev) 
                   )
# 53 "Parser.fsy"
                 : 'expression));
|]
# 330 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Program  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
